Initial tutorial that helps me configure exim4 : https://web.archive.org/web/20130423104300/http://mattlong.posterous.com/enable-cron-emails-using-gmail-on-ubuntu

--This configuration needs a working gmail address, you don't need a domain mane registered--

#Install exim4 package
sudo apt-get install exim4
 
#Configure exim4
sudo dpkg-reconfigure exim4-config
- choose mail sent by smarthost received via SMTP or fetchmail
- Type System Mail Name: pi-hole.com
- Type IP Adresses to listen on for incoming SMTP connections: 127.0.0.1
- Other destinations for which mail is accepted : blank
- Machines to relay mail for : blank
- Machine handling outgoing mail for this host (smarthost): smtp.gmail.com::587
- Choose NO, don’t hide local mail name in outgoing mail.
- Chose NO, don’t keep number of DNS-queries minimal (Dial-on-Demand).
- Choose mbox
- Choose NO, split configuration into small files
- Mail for postmaster : admin (or whatever you want)

#Edit exim4 conf template
sudo vi /etc/exim4/exim4.conf.template

#Find ".ifdef DCconfig_smarthost DCconfig_satellite" and add the following under it
.ifdef DCconfig_smarthost DCconfig_satellite
send_via_gmail:
  driver = manualroute
  domains = ! +local_domains
  transport = gmail_smtp
  route_list = * smtp.gmail.com
  
#Find "begin authenticators" and add the following under it
gmail_login:
  driver = plaintext
  public_name = LOGIN
  client_send = : yourname@gmail.com : YourGmailPassword
  
#Find "transport/30_exim4-config_remote_smtp_smarthost" and add the following under it
gmail_smtp:
  driver = smtp
  port = 587
  hosts_require_auth = $host_address
  hosts_require_tls = $host_address
  
#Find ".ifndef AUTH_CLIENT_ALLOW_NOTLS_PASSWORDS" and change the above "public_name = LOGIN" variable to whatever you want
login:
  driver = plaintext
  public_name = DevNull (initially "= LOGIN", change it to whatever you want)
  
#Update exim4 configuration
sudo update-exim4.conf

#Restart the exim service
sudo /etc/init.d/exim4 restart

#Test email sending (echo = corps message, mail -s = subject)
echo "This is a test." | mail -s Testing yourmail@example.com

#If you wanna send multiples mails, here is the syntax
echo "This is a test." | mail -s Testing yourmail1@example.com; yourmail2@example.com

#su as root user
su -

--Create Scripts in /home/pihole--
sudo vi mail_pihole_log_error.sh

#!/bin/bash

error=$(cat /var/log/pihole/pihole_log_management_error.log | wc -l)

if [ $error != 0 ];then
  echo "error in /var/log/pihole/pihole_log_management_error.log" | mail -s "Error in pihole.log management" robincandau@protonmail.com, robincandau96@gmail.com
fi
------------------------------------
sudo vi mail_pihole_FTL_log_error.sh

#!/bin/bash

error=$(cat /var/log/pihole/pihole_FTL_log_management_error.log | wc -l)

if [ $error != 0 ];then
  echo "error in /var/log/pihole/pihole_FTL_log_management_error.log" | mail -s "Error in pihole-FTL.log management" robincandau@protonmail.com, robincandau96@gmail.com
fi

#Make scripts useable bith pihole user
chown pihole:pihole mail_pihole_log_error.sh
chmod 700 mail_pihole_log_error.sh
chown pihole:pihole mail_pihole_FTL_log_error.sh
chmod 700 mail_pihole_FTL_log_error.sh

#Edit pihole user crontab
crontab -u pihole -e
[...]
#Mail Notification for Pihole Log Error
0 10 * * * /home/pihole/mail_pihole_log_error.sh
0 10 * * * /home/pihole/mail_pihole_FTL_log_error.sh






  
